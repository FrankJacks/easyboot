package ${package}.modules.${moduleName}.controller;

import cn.afterturn.easypoi.excel.ExcelExportUtil;
import cn.afterturn.easypoi.excel.entity.ExportParams;
import cn.afterturn.easypoi.excel.entity.enmus.ExcelType;
import com.zf.easyboot.common.annotation.SysLog;
import com.zf.easyboot.common.utils.ApiMessage;
import com.zf.easyboot.common.utils.BeanCopierUtils;
import com.zf.easyboot.common.utils.PageUtils;
import com.zf.easyboot.common.utils.ResponseFileUtil;
import com.zf.easyboot.config.util.FileOperateUtil;
import io.swagger.annotations.*;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import java.util.Map;

import ${package}.modules.${moduleName}.entity.${className}Entity;
import ${package}.modules.${moduleName}.excel.${className}ExcelVo;
import ${package}.modules.${moduleName}.service.${className}Service;
import ${package}.modules.${moduleName}.vo.${className}SearchVo;


/**
 * ${comments}
 *
 * @author ${author}
 * @email zengms0708@gmail.com
 * @version 1.0
 * @date ${datetime}
 */
@Slf4j
@Api(value = "${comments}", tags = "${comments}详细")
@RestController
@RequestMapping("/${moduleName}/${pathName}")
public class ${className}Controller {

    @Resource
    private  ${className}Service ${classname}Service;

    @Resource
    private FileOperateUtil fileOperateUtil;


    /**
     * 分页查询${comments}
     * @param ${classname}SearchVo ${comments}
     * @return ApiMessage
     */
    @RequestMapping(value = "/list", method = RequestMethod.POST)
    @PreAuthorize("hasAnyRole('SUPER','${roleName}_ALL}')")
    @ApiOperation(value = "分页查询${comments}", notes = "分页查询${comments}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${classname}SearchVo", value = "查询条件", required = false)
    })
    public ApiMessage list(@RequestBody ${className}SearchVo ${classname}SearchVo) {
        Map<String, Object> params = BeanCopierUtils.object2Map(${classname}SearchVo);
        PageUtils page = ${classname}Service.queryList(params);

        return ApiMessage.ofSuccess(page);
    }



    /**
     * 新增${comments}
     * @param ${classname}Entity ${comments}
     * @return ApiMessage
     */
    @SysLog("新增${comments}")
    @RequestMapping(value = "/save", method = RequestMethod.POST)
    @PreAuthorize("hasAnyRole('SUPER','${roleName}_CREATE}')")
    @ApiOperation(value = "新增${comments}", notes = "新增${comments}")
    public ApiMessage save(@RequestBody ${className}Entity ${classname}Entity){
            ${classname}Service.save(${classname}Entity);

        return ApiMessage.ofSuccess();
    }

    /**
     * 修改${comments}
     * @param ${classname}Entity ${comments}
     * @return ApiMessage
     */
    @SysLog("修改${comments}")
    @RequestMapping(value = "/update", method = RequestMethod.POST)
    @PreAuthorize("hasAnyRole('SUPER','${roleName}_EDIT')")
    @ApiOperation(value = "修改${comments}", notes = "修改${comments}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${pk.lowerAttrName}", value = "主键id", required = true)
    })
    public ApiMessage update(@RequestBody ${className}Entity ${classname}Entity){
        ${classname}Service.updateById(${classname}Entity);//全部更新

        return ApiMessage.ofSuccess();
    }

    /**
     * 通过id删除${comments}
     * @param ${pk.lowerAttrName} id
     * @return ApiMessage
     */
    @SysLog("删除${comments}")
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.POST)
    @ApiOperation(value = "删除${comments}", notes = "删除${comments}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${pk.lowerAttrName}", value = "主键id", required = true)
    })
   public ApiMessage delete(@PathVariable ${pk.attrType} ${pk.lowerAttrName}) {
            ${classname}Service.deleteById(${pk.lowerAttrName});

        return ApiMessage.ofSuccess();
    }


    /**
    * 导入excel
    *
    * @param file
    * @return
    */
    @RequestMapping(value = "/importExcel", method = RequestMethod.POST)
    @PreAuthorize("hasAnyRole('SUPER','${roleName}_IMPORTEXCEL')")
    @ApiOperation("批量导入${comments}")
    @SysLog(value = "批量导入${comments}")
    public ApiMessage importExcel(@RequestParam("file") MultipartFile file) {
        String filePath = fileOperateUtil.importFile(file);


        return ${classname}Service.importExcelData(filePath);

    }


    /**
     * 导出excel
     */
    @RequestMapping(value = "/exportExcel", method = RequestMethod.POST)
    @PreAuthorize("hasAnyRole('SUPER','${roleName}_EXPORTEXCEL')")
    @ApiOperation("${comments}批量导出")
    @SysLog("${comments}批量导出")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${classname}SearchVo", value = "查询条件", required = false)
    })
    public void exportExcel(@RequestBody ${className}SearchVo ${classname}SearchVo, HttpServletResponse response) throws IOException {
        Map<String, Object> params = BeanCopierUtils.object2Map(${classname}SearchVo);
        List<${className}ExcelVo> list = ${classname}Service.exportExcel(params);
        ExportParams paramsExcel = new ExportParams(null, "${comments}", ExcelType.XSSF);
        //是否固定表头
        paramsExcel.setFreezeCol(0);
        String name = "${comments}.xlsx";
        Workbook workbook = ExcelExportUtil.exportExcel(paramsExcel, ${className}ExcelVo.class, list);
        ResponseFileUtil.exportExcelFile(response, workbook, name);

        list.clear();
    }

}
